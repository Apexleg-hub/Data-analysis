--The SQL BETWEEN Operator
--The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.

---The BETWEEN operator is inclusive: begin and end values are included. 

--Example
--Selects all products with a price between 10 and 20:

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;
======
--NOT BETWEEN
--To display the products outside the range of the previous example, use NOT BETWEEN:

--Example
SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;
================
--BETWEEN with IN
--The following SQL statement selects all products with a price between 10 and 20. In addition, the CategoryID must be either 1,2, or 3:

--Example
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID IN (1,2,3);

=======

--BETWEEN Text Values
--The following SQL statement selects all products with a ProductName alphabetically between Carnarvon Tigers and Mozzarella di Giovanni:

--Example
SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

=====

--The following SQL statement selects all products with a ProductName between Carnarvon Tigers and Chef Anton's Cajun Seasoning:

--Example
SELECT * FROM Products
WHERE ProductName BETWEEN "Carnarvon Tigers" AND "Chef Anton's Cajun Seasoning"
ORDER BY ProductName;

====

--NOT BETWEEN Text Values
--The following SQL statement selects all products with a ProductName not between Carnarvon Tigers and Mozzarella di Giovanni:

--Example
SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

======
--BETWEEN Dates
--The following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996':

--Example
SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;

=====
-OR:

--Example
SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';
===
=========

--SQL Aliases
--SQL aliases are used to give a table, or a column in a table, a temporary name.

--Aliases are often used to make column names more readable.

--An alias only exists for the duration of that query.

--An alias is created with the AS keyword.

--Example
SELECT CustomerID AS ID
FROM Customers;

===========
--AS is Optional
--Actually, in most database languages, you can skip the AS keyword and get the same result:

--Example
SELECT CustomerID ID
FROM Customers;

====

--Syntax
--When alias is used on column:

SELECT column_name AS alias_name
FROM table_name;

--When alias is used on table:

SELECT column_name(s)
FROM table_name AS alias_name;

====
--Alias for Columns
--The following SQL statement creates two aliases, 
--one for the CustomerID column and one for the 
--CustomerName column:

--Example
SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;

======
--Using Aliases With a Space Character
--If you want your alias to contain one or more spaces, like "My Great Products", surround your alias with square brackets or double quotes.

--Example
--Using [square brackets] for aliases with space characters:

SELECT ProductName AS [My Great Products]
FROM Products;

=====
--Example
--Using "double quotes" for aliases with space characters:

SELECT ProductName AS "My Great Products"
FROM Products;

=====
Note: Some database systems allows both [] and "", and some only allows one of them.

======
--Concatenate Columns
--The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):

--Example
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;
=====
--Note: To get the SQL statement above to work in MySQL use the following:

--MySQL Example
SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address
FROM Customers;
---Note: To get the SQL statement above to work in Oracle use the following:

--Oracle Example
SELECT CustomerName, (Address || ', ' || PostalCode || ' ' || City || ', ' || Country) AS Address
FROM Customers;

====
--Alias for Tables
--The same rules applies when you want to use an alias for a table.

--Example
--Refer to the Customers table as Persons instead:

SELECT * FROM Customers AS Persons;
======
--It might seem useless to use aliases on tables, but when you are using more than one table in your queries, it can make the SQL statements shorter.

--The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the "Customers" and "Orders" tables, 
--and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):

--Example
SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;

===
--The following SQL statement is the same as above, but without aliases:

--Example
SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

=====
--Aliases can be useful when:

--There are more than one table involved in a query
--Functions are used in the query
--Column names are big or not very readable
--Two or more columns are combined together
========
--SQL JOIN
--A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

--Let's look at a selection from the "Orders" table:

====
--Notice that the "CustomerID" column in the "Orders" table refers to the "CustomerID" in the "Customers" table. The relationship between the two tables above is the "CustomerID" column.

--Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables:

--Example

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;

---and it will produce something like this:

=======

--Different Types of SQL JOINs

---Here are the different types of the JOINs in SQL:

--(INNER) JOIN: Returns records that have matching values in both tables
--LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
--RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
--FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table.

======
============

--INNER JOIN
--The INNER JOIN keyword selects records that have matching values in both tables.

--Let's look at a selection of the Products table:

ProductID	ProductName	CategoryID	Price
1			Chais			1		18
2			Chang			1		19
3			Aniseed Syrup	2		10


----And a selection of the Categories table:

CategoryID		CategoryName	Description
1				Beverages		Soft drinks, coffees, teas, beers, and ales
2				Condiments		Sweet and savory sauces, relishes, spreads, and seasonings
3				Confections		Desserts, candies, and sweet breads

--We will join the Products table with the Categories table, by using the CategoryID field from both tables:

--Example
--Join Products and Categories with the INNER JOIN keyword:

SELECT ProductID, ProductName, CategoryName
FROM Products
INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;

========
---Note: The INNER JOIN keyword returns only rows with a match in both tables. Which means that if you have a product with no CategoryID, or with a CategoryID that is not present in the Categories table, that record would not be returned in the result.

--Syntax
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;
=========
--Naming the Columns
--It is a good practice to include the table name when specifying columns in the SQL statement.

--Example
--Specify the table names:

SELECT Products.ProductID, Products.ProductName, Categories.CategoryName
FROM Products
INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;

======
--The example above works without specifying table names, because none of the specified column names are present in both tables. If you try to include CategoryID in the SELECT statement, you will get an error if you do not specify the table name (because CategoryID is present in both tables).

=====
--JOIN or INNER JOIN

--JOIN and INNER JOIN will return the same result.

--INNER is the default join type for JOIN, so when you write JOIN the parser actually writes INNER JOIN.

--Example
--JOIN is the same as INNER JOIN:

SELECT Products.ProductID, Products.ProductName, Categories.CategoryName
FROM Products
JOIN Categories ON Products.CategoryID = Categories.CategoryID;

=====
--JOIN Three Tables
--The following SQL statement selects all orders with customer and shipper information:

--Example
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

=====
=====

--SQL LEFT JOIN Keyword

--The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.

--LEFT JOIN Syntax

SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

--Note: In some databases LEFT JOIN is called LEFT OUTER JOIN.
=====

--SQL LEFT JOIN Example
--The following SQL statement will select all customers, and any orders they might have:

--Example
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

---Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).

=======
--SQL RIGHT JOIN Keyword

--The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match.

--RIGHT JOIN Syntax

SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

--Note: In some databases RIGHT JOIN is called RIGHT OUTER JOIN.

============
--SQL RIGHT JOIN Example

--The following SQL statement will return all employees, and any orders they might have placed:

--Example
SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

--Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).
====
---SQL FULL OUTER JOIN Keyword

--The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.

---Tip: FULL OUTER JOIN and FULL JOIN are the same.

FULL OUTER JOIN Syntax
SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

Note: --FULL OUTER JOIN can potentially return very large result-sets!

====
--SQL FULL OUTER JOIN Example

--The following SQL statement selects all customers, and all orders:

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

--Note: The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or not. So, 
--if there are rows in "Customers" that do not have matches in "Orders",
--or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.

======
--SQL Self Join

--A self join is a regular join, but the table is joined with itself.

Self Join Syntax
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;

---T1 and T2 are different table aliases for the same table.
=====

--SQL Self Join Example
--The following SQL statement matches customers that are from the same city:

--Example
SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;
========
=======
--The SQL UNION Operator

--The UNION operator is used to combine the result-set of two or more SELECT statements.

--Every SELECT statement within UNION must have the same number of columns
--The columns must also have similar data types
--The columns in every SELECT statement must also be in the same order

--UNION Syntax
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

=====
--UNION ALL Syntax

--The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:

SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;

Note: The column names in the result-set are usually equal to the column names in the first SELECT statement.

==========
Below is a selection from the "Customers" table:

CustomerID	CustomerName					ContactName		Address								City			PostalCode	Country
1			Alfreds Futterkiste				Maria Anders	Obere Str. 57						Berlin			12209	Germany
2			Ana Trujillo Emparedados 		Ana Trujillo	Avda. de la Constitución 2222		México D.F.		05021	Mexico
3			Antonio Moreno	Taquería		Antonio Moreno	Mataderos 2312						México D.F.		05023	Mexico

And a selection from the "Suppliers" table:

SupplierID			SupplierName				ContactName			Address			City		PostalCode	Country
1					Exotic Liquid				Charlotte Cooper	49 Gilbert St.	London		EC1 4SD		UK
2					New Orleans Cajun Delights	Shelley Burke		P.O. Box 78934	New Orleans	70117		USA
--3					Grandma Kelly's Homestead	Regina Murphy		707 Oxford Rd.	Ann Arbor	48104		USA

=====
--SQL UNION Example
--The following SQL statement returns the cities (only distinct values) from both the "Customers" and the "Suppliers" table:

--Example
SELECT City FROM Customers
UNION
SELECT City FROM Suppliers
ORDER BY City;

---Note: If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. 
---Use UNION ALL to also select duplicate values!
======
--SQL UNION ALL Example

--The following SQL statement returns the cities (duplicate values also) from both the "Customers" and the "Suppliers" table:

--Example
SELECT City FROM Customers
UNION ALL
SELECT City FROM Suppliers
ORDER BY City;

====
--SQL UNION With WHERE

--The following SQL statement returns the German cities (only distinct values) from both the "Customers" and the "Suppliers" table:

--Example
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

=====
--SQL UNION ALL With WHERE

--The following SQL statement returns the German cities (duplicate values also) from both the "Customers" and the "Suppliers" table:

--Example
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;
======

--Another UNION Example
--The following SQL statement lists all customers and suppliers:

--Example
SELECT 'Customer' AS Type, ContactName, City, Country
FROM Customers
UNION
SELECT 'Supplier', ContactName, City, Country
FROM Suppliers;

---Notice the "AS Type" above - it is an alias. SQL Aliases are used to give a table or a column a temporary name. An alias only exists for the duration of the query. So, here we have created a temporary column named "Type", that list whether the contact person is a "Customer" or a "Supplier".

=========
==========
--The SQL HAVING Clause
--The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

--HAVING Syntax

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

========

--SQL HAVING Examples

--The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers:

--Example
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;

=======
--The following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):

--Example
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;

=========
--More HAVING Examples

--The following SQL statement lists the employees that have registered more than 10 orders:

--Example

SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM (Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 10;

The following SQL statement lists if the employees "Davolio" or "Fuller" have registered more than 25 orders:
======
--Example

SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
WHERE LastName = 'Davolio' OR LastName = 'Fuller'
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 25;

=========
=========
--The SQL EXISTS Operator

--The EXISTS operator is used to test for the existence of any record in a subquery.

--The EXISTS operator returns TRUE if the subquery returns one or more records.

--EXISTS Syntax

SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);
============
--SQL EXISTS Examples

--The following SQL statement returns TRUE and lists the suppliers with a product price less than 20:

--Example

SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);

==========
--The following SQL statement returns TRUE and lists the suppliers with a product price equal to 22:


--Example

SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price = 22);

============
============

--The SQL ANY and ALL Operators
--The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.

--The SQL ANY Operator

--The ANY operator:

--		returns a boolean value as a result
---		returns TRUE if ANY of the subquery values meet the condition

--ANY means that the condition will be true if the operation is true for any of the values in the range.

--ANY Syntax

SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
  (SELECT column_name
  FROM table_name
  WHERE condition);

  --Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).
  ===============

---The SQL ALL Operator

--The ALL operator:

--		returns a boolean value as a result
--		returns TRUE if ALL of the subquery values meet the condition
--		is used with SELECT, WHERE and HAVING statements
--ALL means that the condition will be true only if the operation is true for all values in the range. 

--ALL Syntax With SELECT

SELECT ALL column_name(s)
FROM table_name
WHERE condition;
=======
--ALL Syntax With SELECT

SELECT ALL column_name(s)
FROM table_name
WHERE condition;
=======
--ALL Syntax With WHERE or HAVING

SELECT column_name(s)
FROM table_name
WHERE column_name operator ALL
  (SELECT column_name
  FROM table_name
  WHERE condition);

Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

============
--SQL ANY Examples
--The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity equal to 10 (this will return TRUE because the Quantity column has some values of 10):

--Example
SELECT ProductName
FROM Products
WHERE ProductID = ANY
  (SELECT ProductID
  FROM OrderDetails
  WHERE Quantity = 10);

  --The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 99 (this will return TRUE because the Quantity column has some values larger than 99):

  ====
 -- Example

SELECT ProductName
FROM Products
WHERE ProductID = ANY
  (SELECT ProductID
  FROM OrderDetails
  WHERE Quantity > 99);
  ========

--The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 1000 (this will return FALSE because the Quantity column has no values larger than 1000):

--Example

SELECT ProductName
FROM Products
WHERE ProductID = ANY
  (SELECT ProductID
  FROM OrderDetails
  WHERE Quantity > 1000);

  ======
--SQL ALL Examples

--The following SQL statement lists ALL the product names:

--Example

SELECT ALL ProductName
FROM Products
WHERE TRUE;
=======
--The following SQL statement lists the ProductName if ALL the records in the OrderDetails table has Quantity equal to 10. This will of course return FALSE because the Quantity column has many different values (not only the value of 10):

--Example
SELECT ProductName
FROM Products
WHERE ProductID = ALL
  (SELECT ProductID
  FROM OrderDetails
  WHERE Quantity = 10);

  =======
  =======